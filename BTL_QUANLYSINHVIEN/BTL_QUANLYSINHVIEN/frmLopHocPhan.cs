using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using BUS;
using DTO;

namespace BTL_QUANLYSINHVIEN
{
    public partial class frmLopHocPhan : DevExpress.XtraEditors.XtraForm
    {
        public bool them = true;
        public bool sua = false;
        LopHocPhan_DTO lhp;

        public frmLopHocPhan()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource

        }

        private void btnDSLHP_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            nbcDSLopHocPhan.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            nbcLHP.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Collapsed;
            LoadDSLHP();
            
            AnMenu(true);
            btnDSLHP.Enabled = false;
            btnThemLHP.Enabled = true;
            btnSuaLHP.Enabled = true;
            btnXoaLHP.Enabled = true;
           // btnDSThiLai.Enabled = true;
            //gcDSLHP.DataSource = LopHocPhan_BUS.DanhSachLHP();
        }
        private void frmLopHocPhan_Load(object sender, EventArgs e)
        {
            AnMenu(false);
            btnLuuDiem.Enabled = false;
            btnHuyDiem.Enabled = false;
            btnXuatExcel.Enabled = false;
        }
        public void LoadDSLHP()
        {

            DSLHPbindingSource.DataSource = LopHocPhan_BUS.DanhSachLHP();
            gcDSLHP.DataSource = DSLHPbindingSource;
            int soKhoa = cboKhoa.Items.Count;
            for (int i = 0; i < soKhoa;i++ )
            {
                cboKhoa.Items.RemoveAt(0);
            }
            int soMonhoc = cboMonHoc.Items.Count;
            int soGiaoVien = cboGiaoVien.Items.Count;
            for (int i = 0; i < soMonhoc; i++)
            {
                repositoryItemComboBox1.Items.RemoveAt(0);
                cboMonHoc.Items.RemoveAt(0);
            }
            for (int i = 0; i < soGiaoVien; i++)
            {
                repositoryItemComboBox2.Items.RemoveAt(0);
                cboGiaoVien.Items.RemoveAt(0);
            }
            DataTable dtb = Khoa_BUS.LoadtenKhoa();
            for (int i = 0; i < dtb.Rows.Count; i++)
            {
                string name = ChuanHoa(dtb.Rows[i][0].ToString().ToLower());
                cboKhoa.Items.Add(name);
            }
            DataTable dtb1 = MonHoc_BUS.LoadtenMH(cboKhoa.Text);
            for (int i = 0; i < dtb1.Rows.Count; i++)
            {
                string name = ChuanHoa(dtb1.Rows[i][0].ToString().ToLower());
                repositoryItemComboBox1.Items.Add(name);
                cboMonHoc.Items.Add(name);
            }
            DataTable dtb2 = GiaoVien_BUS.LoadtenGiaoVien(cboKhoa.Text);
            for (int i = 0; i < dtb2.Rows.Count; i++)
            {
                string name = ChuanHoa(dtb2.Rows[i][0].ToString().ToLower());
                repositoryItemComboBox2.Items.Add(name);
                cboGiaoVien.Items.Add(name);
            }
            //cboMonHoc.ResetText();
            //cboGiaoVien.ResetText();
        }
        public void AnMenu(bool logged)
        {
            //Mac dinh la dang nhap thanh cong bat het cac Menu

            //
            btnThemLHP.Enabled = logged;
            btnSuaLHP.Enabled = logged;
            btnXoaLHP.Enabled = logged;
            //  btnThoat.Enabled = logged;
            btnThemSV.Enabled = logged;
            btnSuaSV.Enabled = logged;
            btnLuu.Enabled = logged;
            btnHuy.Enabled = logged;
            btnXoaSV.Enabled = logged;
            btnNhapDiem.Enabled = logged;
            btnCapNhat.Enabled = logged;
           // btnDSThiLai.Enabled = logged;
           // btnPrevious.Enabled = logged;
           // btnFirst.Enabled = logged;
        }
        //trỏ từng dòng trong gridview
        private void gvDSLHP_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if (gvDSLHP.FocusedRowHandle >= 0)
            {
                tbMaLHP.Text = gvDSLHP.GetFocusedRowCellValue(colMaLHP).ToString();
                
                cboKhoa.Text = ChuanHoa(gvDSLHP.GetFocusedRowCellValue(colTenKhoa).ToString().ToLower());
                cboGiaoVien.Text = ChuanHoa(gvDSLHP.GetFocusedRowCellValue(colTenGV).ToString().ToLower());
                cboMonHoc.Text = ChuanHoa(gvDSLHP.GetFocusedRowCellValue(colTenMH).ToString().ToLower());
                cboKyHoc.Text = gvDSLHP.GetFocusedRowCellValue(colKyHoc).ToString();
                if (gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString() != "")
                    dtpNgayThi.Value = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString());
                //DataTable dtb = LopHocPhan_BUS.timeLHP(Convert.ToInt32(tbMaLHP.Text));
                //if (dtb.Rows[0][0].ToString()!="")
                //    dtpNgayBatDau.Value = DateTime.Parse(dtb.Rows[0][0].ToString());
                //if (dtb.Rows[0][1].ToString() != "")
                //    dtpNgayKetThuc.Value = DateTime.Parse(dtb.Rows[0][1].ToString());
                if (gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString() != "")
                    dtpNgayBatDau.Value = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString());
                if (gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString() != "")
                    dtpNgayKetThuc.Value = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString());
                LHPbindingSource.DataSource = LopHocPhan_BUS.LHP(tbMaLHP.Text);
                gcLHP.DataSource = LHPbindingSource;
            }
        }
        private void btnSuaLHP_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            nbcLHP.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            nbcDSLopHocPhan.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            tbMaLHP.Focus();
        }
     

        private void btnNhapDiem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            nbcDSLopHocPhan.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Collapsed;
            nbcLHP.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Collapsed;
            btnDSLHP.Enabled = true;
            btnThemLHP.Enabled = false;
            btnSuaLHP.Enabled = false;
            btnXoaLHP.Enabled = false;
            btnLuuDiem.Enabled = true;
            btnHuyDiem.Enabled = true;
            btnXuatExcel.Enabled = true;
        }
        //thêm lớp học phần
        private void btnThem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            nbcDSLopHocPhan.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            nbcLHP.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            if (them)
            {
                cboKhoa.Refresh();
                cboMonHoc.Refresh();
                cboGiaoVien.Refresh();
                cboKyHoc.Refresh();
                dtpNgayBatDau.Refresh();
                dtpNgayKetThuc.Refresh();
                dtpNgayThi.Refresh();
                string maLHP=nextMa(LopHocPhan_BUS.LastMaLHP());
                //
                them = false;
                DSLHPbindingSource.AddNew();
                //mã sinh viên tự tăng
                gvDSLHP.SetFocusedRowCellValue(colMaLHP, maLHP);
                tbMaLHP.Text = maLHP.ToString();
                //trỏ tới dòng cuối cùng trong gridview
                gvDSLHP.FocusedRowHandle = gvDSLHP.RowCount - 1;
                cboKhoa.Focus();
                
            }
            else
            {
                cboKhoa.Focus();
                gvDSLHP.FocusedRowHandle = gvDSLHP.RowCount - 1;
            }
        }
       
        private void btnLuu_Click(object sender, EventArgs e)
        {
            try
            {
                if (!them && gvDSLHP.FocusedRowHandle == gvDSLHP.RowCount - 1)
                {
                    if (cboKhoa.Text != "" && cboGiaoVien.Text != ""&&cboKyHoc.Text!=""&&cboMonHoc.Text!="")
                    {
                        string monHoc=ChuanHoa(cboMonHoc.Text.ToLower());
                        string giaoVien=ChuanHoa(cboGiaoVien.Text.ToLower());
                        LopHocPhan_BUS.themLHP(tbMaLHP.Text, monHoc, giaoVien, dtpNgayBatDau.Value, dtpNgayKetThuc.Value, dtpNgayThi.Value, Convert.ToInt32(cboKyHoc.Text));
                        //thêm trực tiếp lớp vào gridview mà không load lại danh sách
                        gvDSLHP.SetFocusedRowCellValue(colMaLHP, tbMaLHP.Text);
                        gvDSLHP.SetFocusedRowCellValue(colTenMH, monHoc);
                        gvDSLHP.SetFocusedRowCellValue(colTenGV, giaoVien);
                        gvDSLHP.SetFocusedRowCellValue(colNgayBatDau, dtpNgayBatDau.Value);
                        gvDSLHP.SetFocusedRowCellValue(colNgayKetThuc, dtpNgayKetThuc.Value);
                        gvDSLHP.SetFocusedRowCellValue(colNgayThi, dtpNgayThi.Value);
                        gvDSLHP.SetFocusedRowCellValue(colKyHoc, cboKyHoc.Text);
                        MessageBox.Show("Thêm thành công");
                        them = true;
                    }
                    //else if (tbHoSV.Text == "" || tbTenSV.Text == "")
                    //{
                    //    MessageBox.Show("Nhập đầy đủ Họ Tên Sinh Viên");
                    //}
                    else
                        MessageBox.Show("Nhập đầy đủ thông tin cho Lớp học phần");
                }
                else
                {
                    if (MessageBox.Show("Bạn có chắc muốn sửa không?", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        try
                        {
                            if(cboMonHoc.Text.Trim()!=gvDSLHP.GetFocusedRowCellValue(colTenMH).ToString())
                            {
                                LopHocPhan_BUS.suaLHP_MH(tbMaLHP.Text, cboMonHoc.Text);
                                gvDSLHP.SetFocusedRowCellValue(colTenMH, cboMonHoc.Text);
                            }
                            if(cboGiaoVien.Text.Trim()!=gvDSLHP.GetFocusedRowCellValue(colTenGV).ToString())
                            {
                                LopHocPhan_BUS.suaLHP_GV(tbMaLHP.Text, cboGiaoVien.Text);
                                gvDSLHP.SetFocusedRowCellValue(colTenGV, cboGiaoVien.Text);
                            }
                            if(gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString()==""||
                                gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString()==""||
                                gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString()==""||
                                dtpNgayBatDau.Value!=DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString())||
                                dtpNgayKetThuc.Value!=DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString())||
                                dtpNgayThi.Value!=DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString()))
                            {
                                LopHocPhan_BUS.suaLHP_date(tbMaLHP.Text, dtpNgayBatDau.Value, dtpNgayKetThuc.Value, dtpNgayThi.Value);
                                gvDSLHP.SetFocusedRowCellValue(colNgayBatDau, dtpNgayBatDau.Value);
                                gvDSLHP.SetFocusedRowCellValue(colNgayKetThuc, dtpNgayKetThuc.Value);
                                gvDSLHP.SetFocusedRowCellValue(colNgayThi, dtpNgayThi.Value);
                            }
                            if(cboKyHoc.Text.Trim()!=gvDSLHP.GetFocusedRowCellValue(colKyHoc).ToString())
                            {
                                LopHocPhan_BUS.suaLHP_KyHoc(tbMaLHP.Text,Convert.ToInt32(cboKyHoc.Text.ToString()));
                                gvDSLHP.SetFocusedRowCellValue(colKyHoc, cboKyHoc.Text);
                            }
                            MessageBox.Show("Sửa thành công!");
                            sua = true;
                        }
                        catch
                        {
                            MessageBox.Show("Sửa không thành công!");
                        }
                    }
                    else
                    {
                        tbMaLHP.Text = gvDSLHP.GetFocusedRowCellValue(colMaLHP).ToString();
                        cboKhoa.Text = gvDSLHP.GetFocusedRowCellValue(colTenKhoa).ToString();
                        cboMonHoc.Text = gvDSLHP.GetFocusedRowCellValue(colTenMH).ToString();
                        cboGiaoVien.Text = gvDSLHP.GetFocusedRowCellValue(colTenGV).ToString();
                        if (gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString() != "")
                            dtpNgayBatDau.Value = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString());
                        if (gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString() != "")
                            dtpNgayKetThuc.Value = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString());
                        if (gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString() != "")
                            dtpNgayThi.Value = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString());
                        cboKyHoc.Text = gvDSLHP.GetFocusedRowCellValue(colKyHoc).ToString();
                    }
                }

            }
            catch
            {
                MessageBox.Show("Lưu thất bại");
            }
        }
        //tự tăng mã LHP
        public string nextMa(string s)
        {
            string sub1 = s.Substring(0, 3);
            string sub2 = s.Substring(3).Trim();
            int ma = Convert.ToInt32(sub2) + 1;
            string sub = "";
            //chèn thêm các kí tự 0 vào mã
            for (int i = 0; i < sub2.Length - ma.ToString().Length; i++)
                sub += "0";
            sub += ma.ToString();
            sub1 += sub;
            //
            return sub1;
        }
        //chuẩn hóa chuỗi
        public string ChuanHoa(string st)
        {
            string st1 = "";
            st = st.Trim();
            while (st.Length != 0)
            {
                st += " ";
                int i = st.IndexOf(' ');
                string s = char.ToUpper(st[0]) + st.Substring(1, i);
                st1 += s;
                st = st.Substring(i + 1).Trim();
            }
            return st1.Trim();
        }
        //các môn học, giáo viên thuộc khoa ...
        private void cboKhoa_SelectedIndexChanged(object sender, EventArgs e)
        {
            int soMonhoc = cboMonHoc.Items.Count;
            int soGiaoVien = cboGiaoVien.Items.Count;
            for(int i=0;i<soMonhoc;i++)
            {
                repositoryItemComboBox1.Items.RemoveAt(0);
                cboMonHoc.Items.RemoveAt(0);
            }
            for (int i = 0; i < soGiaoVien; i++)
            {
                repositoryItemComboBox2.Items.RemoveAt(0);
                cboGiaoVien.Items.RemoveAt(0);
            }
            cboMonHoc.ResetText();
            cboGiaoVien.ResetText();
            DataTable dtb = MonHoc_BUS.LoadtenMH(cboKhoa.Text);
            for (int i = 0; i < dtb.Rows.Count; i++)
            {
                string name = ChuanHoa(dtb.Rows[i][0].ToString().ToLower());
                repositoryItemComboBox1.Items.Add(name);
                cboMonHoc.Items.Add(name);
            }
            
            DataTable dtb1 = GiaoVien_BUS.LoadtenGiaoVien(cboKhoa.Text);
            for (int i = 0; i < dtb1.Rows.Count; i++)
            {
                string name = ChuanHoa(dtb1.Rows[i][0].ToString().ToLower());
                repositoryItemComboBox2.Items.Add(name);
                cboGiaoVien.Items.Add(name);
            }
            
            //cboMonHoc.SelectedIndex = 0;
        }

        private void btnHuy_Click(object sender, EventArgs e)
        {
            //hủy khi không muốn thêm LHP
            // MessageBox.Show(gvDSLHP.FocusedRowHandle+" "+gvDSLHP.RowCount);
            if (!them && gvDSLHP.FocusedRowHandle == gvDSLHP.RowCount - 1)
            {
                them = true;
                DSLHPbindingSource.RemoveAt(gvDSLHP.RowCount - 1);
            }
            //hủy khi sửa
            else
            {
                tbMaLHP.Text = gvDSLHP.GetFocusedRowCellValue(colMaLHP).ToString();
                cboKhoa.Text = gvDSLHP.GetFocusedRowCellValue(colTenKhoa).ToString();
                cboMonHoc.Text = gvDSLHP.GetFocusedRowCellValue(colTenMH).ToString();
                cboGiaoVien.Text = gvDSLHP.GetFocusedRowCellValue(colTenGV).ToString();
                if (gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString() != "")
                    dtpNgayBatDau.Value = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString());
                if (gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString() != "")
                    dtpNgayKetThuc.Value = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString());
                if (gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString() != "")
                    dtpNgayThi.Value = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString());
                cboKyHoc.Text = gvDSLHP.GetFocusedRowCellValue(colKyHoc).ToString();
            }
        }
        //khi sửa ở 1 dòng trên gridview và trỏ sang dòng khác thì có sự kiện 
        private void gvDSLHP_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            if (!them)
            {
                if (gvDSLHP.FocusedRowHandle != gvDSLHP.RowCount - 1)
                {

                }
                else
                {
                    if (MessageBox.Show("Bạn có chắc muốn lưu không?", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        try
                        {
                            if (gvDSLHP.GetFocusedRowCellValue(colTenMH).ToString() != "" && 
                            gvDSLHP.GetFocusedRowCellValue(colTenGV).ToString() != "" && 
                            gvDSLHP.GetFocusedRowCellValue(colKyHoc).ToString() != ""&&
                              gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString() != ""&&
                                gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString() != ""&&
                                gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString() != "")
                            {
                                //chuẩn hóa tên
                                string maLHP=gvDSLHP.GetFocusedRowCellValue(colMaLHP).ToString();
                                string monHoc = ChuanHoa(gvDSLHP.GetFocusedRowCellValue(colTenMH).ToString().ToLower());
                                string giaoVien = ChuanHoa(gvDSLHP.GetFocusedRowCellValue(colTenGV).ToString().ToLower());
                                DateTime ngaybd = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString());
                                DateTime ngaykt = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString());
                                DateTime ngayThi = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString());
                                int kyHoc=Convert.ToInt32(gvDSLHP.GetFocusedRowCellValue(colKyHoc).ToString());

                                LopHocPhan_BUS.themLHP(maLHP,monHoc,giaoVien,ngaybd,ngaykt,ngayThi,kyHoc);
                                MessageBox.Show("Thêm thành công");
                                // this.SinhVienbindingSource.EndEdit();
                                //chuẩn hóa trực tiếp sinh viên vào gridview mà không load lại danh sách
                              //  gvDSLHP.SetFocusedRowCellValue(colHoSV, hoSV);
                               // gvDSLHP.SetFocusedRowCellValue(colTenSV, tenSV);
                              ///  gvDSLHP.SetFocusedRowCellValue(colDiaChi, diaChi);
                              //  gvDSLHP.SetFocusedRowCellValue(colNoiSinh, noiSinh);
                                //load_DS();
                                //chuẩn hóa ở textbox
                                cboMonHoc.Text=monHoc;
                                cboGiaoVien.Text=giaoVien;
                                cboKyHoc.Text=kyHoc.ToString();
                                dtpNgayBatDau.Value=ngaybd;
                                dtpNgayKetThuc.Value=ngaykt;
                                dtpNgayThi.Value=ngayThi;
                                cboKhoa.Text = ((DataTable)Khoa_BUS.TenKhoa_MH(monHoc)).Rows[0][0].ToString();
                                //
                                them = true;
                            }
                            else
                                MessageBox.Show("Nhập đầy đủ thông tin cho Lớp học phần");
                        }
                        catch
                        {
                            MessageBox.Show("Thêm không thành công!");
                        }
                    }
                    else
                    {
                        them = true;
                        DSLHPbindingSource.RemoveAt(gvDSLHP.RowCount - 1);
                    }
                }
            }
            else if(sua)
            {
                sua = false;
            }
            else
            {
                if (cboGiaoVien.Text.Trim() ==gvDSLHP.GetFocusedRowCellValue(colTenGV).ToString().Trim()&&
                    cboMonHoc.Text.Trim()==gvDSLHP.GetFocusedRowCellValue(colTenMH).ToString().Trim() &&
                    cboKyHoc.Text.Trim()==gvDSLHP.GetFocusedRowCellValue(colKyHoc).ToString().Trim()&&
                    gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString() != "" &&
                    gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString() != "" &&
                    gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString() != "" &&
                    (dtpNgayBatDau.Value == DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString()) &&
                    dtpNgayKetThuc.Value == DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString()) &&
                    dtpNgayThi.Value == DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString())))
                {

                }
                else
                {
                    if (MessageBox.Show("Bạn có chắc muốn sửa không?", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        try
                        {
                            if (cboMonHoc.Text.Trim() != gvDSLHP.GetFocusedRowCellValue(colTenMH).ToString())
                            {
                                LopHocPhan_BUS.suaLHP_MH(tbMaLHP.Text, cboMonHoc.Text);
                                cboMonHoc.Text = gvDSLHP.GetFocusedRowCellValue(colTenMH).ToString();
                            }
                            if (cboGiaoVien.Text.Trim() != gvDSLHP.GetFocusedRowCellValue(colTenGV).ToString())
                            {
                                LopHocPhan_BUS.suaLHP_GV(tbMaLHP.Text, cboGiaoVien.Text);
                                cboGiaoVien.Text = gvDSLHP.GetFocusedRowCellValue(colTenGV).ToString();
                            }
                            if (gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString() != "" &&
                                gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString() != "" &&
                                gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString() != "" &&
                                (dtpNgayBatDau.Value != DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString()) ||
                                dtpNgayKetThuc.Value != DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString()) ||
                                dtpNgayThi.Value != DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString())))
                            {
                                LopHocPhan_BUS.suaLHP_date(tbMaLHP.Text, DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString()), DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString()), DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString()));
                                dtpNgayBatDau.Value = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayBatDau).ToString());
                                dtpNgayKetThuc.Value = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayKetThuc).ToString());
                                dtpNgayThi.Value = DateTime.Parse(gvDSLHP.GetFocusedRowCellValue(colNgayThi).ToString());
                            }
                            if (cboKyHoc.Text.Trim() != gvDSLHP.GetFocusedRowCellValue(colKyHoc).ToString())
                            {
                                LopHocPhan_BUS.suaLHP_KyHoc(tbMaLHP.Text, Convert.ToInt32(gvDSLHP.GetFocusedRowCellValue(colKyHoc).ToString()));
                                cboKyHoc.Text = gvDSLHP.GetFocusedRowCellValue(colKyHoc).ToString();
                            }
                            cboKhoa.Text = ((DataTable)Khoa_BUS.TenKhoa_MH(cboMonHoc.Text.ToString())).Rows[0][0].ToString();
                            MessageBox.Show("Sửa thành công!");
                        }
                        catch
                        {
                            MessageBox.Show("Sửa không thành công!");
                        }
                    }
                    else
                    {
                        gvDSLHP.SetFocusedRowCellValue(colTenMH, cboMonHoc.Text);
                        gvDSLHP.SetFocusedRowCellValue(colTenGV, cboGiaoVien.Text);
                        gvDSLHP.SetFocusedRowCellValue(colNgayBatDau, dtpNgayBatDau.Value);
                        gvDSLHP.SetFocusedRowCellValue(colNgayKetThuc, dtpNgayKetThuc.Value);
                        gvDSLHP.SetFocusedRowCellValue(colNgayThi, dtpNgayThi.Value);
                        gvDSLHP.SetFocusedRowCellValue(colKyHoc, cboKyHoc.Text);
                    }
                }
            }
        }

        private void btnXoaLHP_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (MessageBox.Show("Bạn có chắc muốn xóa không?", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                LopHocPhan_BUS.xoaLHP(gvDSLHP.GetFocusedRowCellValue(colMaLHP).ToString());
                DSLHPbindingSource.RemoveAt(gvDSLHP.FocusedRowHandle);
                MessageBox.Show("Xóa thành công!");
            }
        }

        private void btnXuatExcel_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //BindingSource LHPbindingSource = new BindingSource();
            //LHPbindingSource.DataSource = LopHocPhan_BUS.LHP(tbMaLHP.Text);
            //DataTable dt = (DataTable)LHPbindingSource.DataSource;
            DataTable dt = LopHocPhan_BUS.LHP(tbMaLHP.Text);
            dt.TableName = "allstudents";
            Report report = new Report();
            report.report_LHP("", dt, tbMaLHP.Text, tbMaLHP.Text,cboMonHoc.Text,cboGiaoVien.Text,dtpNgayThi.Value.Year.ToString());
        }

        private void btnThemSV_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            nbcDSLopHocPhan.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Collapsed;
            frmThemSinhVien f = new frmThemSinhVien();
            if(f.ShowDialog()==DialogResult.OK)
            {
                string tenLop = f.tenLop;
                f.Close();
                try
                {    
                    DataTable dtb = Lop_BUS.DSSV_Lop(tenLop);
                    for(int i=0;i<dtb.Rows.Count;i++)
                    {
                        LHPbindingSource.AddNew();
                        gvLHP.SetFocusedRowCellValue(colMaSV, dtb.Rows[i][0].ToString());
                        gvLHP.SetFocusedRowCellValue(colTenSV, dtb.Rows[i][1].ToString());
                        if(dtb.Rows[i][3].ToString()!="")
                        {
                            gvLHP.SetFocusedRowCellValue(colNgaySinh, DateTime.Parse(dtb.Rows[i][3].ToString()));
                        }
                        if (dtb.Rows[i][5].ToString() != "")
                        {
                            gvLHP.SetFocusedRowCellValue(colNgayNhapHoc, DateTime.Parse(dtb.Rows[i][5].ToString()));
                        }
                    }
                    LopHocPhan_BUS.themDSSV_LHP(tenLop, tbMaLHP.Text);
                    MessageBox.Show("Thêm thành công");
                }
                catch
                {
                    MessageBox.Show("Thêm không thành công");
                }
            }
        }

        private void btnXoaSV_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (gvLHP.FocusedRowHandle >= 0)
            {
                string maSV = gvLHP.GetFocusedRowCellValue(colMaSV).ToString().Trim();
                string maLHP = tbMaLHP.Text.Trim();
                if (MessageBox.Show("Bạn có chắc muốn xóa không?", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    try
                    {
                        LopHocPhan_BUS.xoaSV_LHP(maSV, maLHP);
                        LHPbindingSource.RemoveAt(gvLHP.FocusedRowHandle);
                        MessageBox.Show("Xóa thành công!");
                    }
                    catch
                    { 
                        MessageBox.Show("Xóa không thành công!");
                    }
                }
            }
        }

        private void btnLuuDiem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            int soSV = gvLHP.RowCount;
            for (int i = 0; i < soSV; i++)
            {
                string maSV = gvLHP.GetRowCellValue(i, colMaSV).ToString();
                string maLHP = tbMaLHP.Text;
                if (gvLHP.GetRowCellValue(i, colDiemChuyenCan).ToString() != "" &&
                    gvLHP.GetRowCellValue(i, colDiemQuaTrinh).ToString() != "" &&
                    gvLHP.GetRowCellValue(i, colDiemThi).ToString() != "" &&
                    gvLHP.GetRowCellValue(i, colDiemTB).ToString() != "")
                {
                    decimal dcc = decimal.Parse(gvLHP.GetRowCellValue(i, colDiemChuyenCan).ToString());
                    decimal dqt = decimal.Parse(gvLHP.GetRowCellValue(i, colDiemQuaTrinh).ToString());
                    decimal dt = decimal.Parse(gvLHP.GetRowCellValue(i, colDiemThi).ToString());
                    decimal dtb = decimal.Parse(gvLHP.GetRowCellValue(i, colDiemTB).ToString());
                     SinhVien_BUS.ThemDiem(maSV, maLHP, dcc, dqt, dt, dtb);
                }

            }
            MessageBox.Show("Luu điểm thành công");
        }

        private void btnCapNhat_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //load lại DSLHP 
            LoadDSLHP();
            //load lại danh sách sinh viên trong LHP
            if (gvDSLHP.FocusedRowHandle >= 0)
            {
                LHPbindingSource.DataSource = LopHocPhan_BUS.LHP(gvDSLHP.GetFocusedRowCellValue(colMaLHP).ToString());
                gcLHP.DataSource = LHPbindingSource;
            }
        }

        private void btnHuyDiem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            LHPbindingSource.DataSource = LopHocPhan_BUS.LHP(gvDSLHP.GetFocusedRowCellValue(colMaLHP).ToString());
            gcLHP.DataSource = LHPbindingSource;
        }

        private void gvLHP_InvalidRowException(object sender, DevExpress.XtraGrid.Views.Base.InvalidRowExceptionEventArgs e)
        {
            e.ExceptionMode = DevExpress.XtraEditors.Controls.ExceptionMode.NoAction;
        }

        private void gvLHP_ValidatingEditor(object sender, DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs e)
        {
            try
            {
                decimal i = Convert.ToDecimal(e.Value.ToString());
                if (i > 10)
                {
                    e.ErrorText = "Điểm số không quá 10";
                    gvLHP.SetColumnError(gvLHP.FocusedColumn, e.ErrorText);
                    e.Valid = false;
                }
            }
            catch
            {
                return;
            }
        }

        private void gvLHP_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            string diemCC = gvLHP.GetFocusedRowCellValue(colDiemChuyenCan).ToString();
            string diemQT = gvLHP.GetFocusedRowCellValue(colDiemQuaTrinh).ToString();
            string diemThi = gvLHP.GetFocusedRowCellValue(colDiemThi).ToString();
            string diem = "";
            if(diemCC!=""&&diemQT!=""&&diemThi!="")
            {
                double diemTB;
                if (Convert.ToDouble(diemThi) < 4) diemTB = 0;
                else
                    diemTB = (0.10*Convert.ToDouble(diemCC)+0.20*Convert.ToDouble(diemQT)  + 0.70*Convert.ToDouble(diemThi));
                diem=String.Format("{0:0.00}",diemTB);
                gvLHP.SetFocusedRowCellValue(colDiemTB, diem);
                gvLHP.SetFocusedRowCellValue(colDiemQuaTrinh, String.Format("{0:0.00}", Convert.ToDouble(diemQT)));
                gvLHP.SetFocusedRowCellValue(colDiemChuyenCan, String.Format("{0:0.00}", Convert.ToDouble(diemCC)));
                gvLHP.SetFocusedRowCellValue(colDiemThi, String.Format("{0:0.00}", Convert.ToDouble(diemThi)));
            }
           
        }


       
      
    }
}