using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using BUS;

namespace BTL_QUANLYSINHVIEN
{
    public partial class frmLop : DevExpress.XtraEditors.XtraForm
    {
        public bool them = true;
        public bool sua = false;
        public frmLop()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
        }
        //tự tăng mã Lop
        public string nextMa(string s)
        {
            string sub1 = s.Substring(0, 2);
            string sub2 = s.Substring(2).Trim();
            int Ma = Convert.ToInt32(sub2) + 1;
            string sub = "";
            //chèn thêm các kí tự 0 vào mã
            for (int i = 0; i < sub2.Length - Ma.ToString().Length; i++)
                sub += "0";
            sub += Ma.ToString();
            sub1 += sub;
            //
            return sub1;
        }
        //chuẩn hóa chuỗi
        public string ChuanHoa(string st)
        {
            string st1 = "";
            st = st.Trim();
            while (st.Length != 0)
            {
                st += " ";
                int i = st.IndexOf(' ');
                string s = char.ToUpper(st[0]) + st.Substring(1, i);
                st1 += s;
                st = st.Substring(i + 1).Trim();
            }
            return st1.Trim();
        }
        private void btnDSLop_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            nbcDSLop.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            nbcLop.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Collapsed;
            LoadDSLop();
            DataTable dtb = Khoa_BUS.LoadtenKhoa();
            for (int i = 0; i < dtb.Rows.Count; i++)
            {
                string name = ChuanHoa(dtb.Rows[i][0].ToString().ToLower());
                repositoryItemComboBox1.Items.Add(name);
                cboTenKhoa.Items.Add(name);
            }
            btnDSLop.Enabled = false;
            AnMenu(true);
        }
        private void frmLop_Load(object sender, EventArgs e)
        {
            AnMenu(false);
        }
        public void LoadDSLop()
        {
            DSLopbindingSource.DataSource = Lop_BUS.DSLop();
            gcDSLop.DataSource = DSLopbindingSource;
            int soKhoa = cboTenKhoa.Items.Count;
            for (int i = 0; i < soKhoa; i++)
            {
                cboTenKhoa.Items.RemoveAt(0);
                repositoryItemComboBox1.Items.RemoveAt(0);
            }
        }
        public void AnMenu(bool logged)
        {
            //Mac dinh la dang nhap thanh cong bat het cac Menu

            //
            btnThemLop.Enabled = logged;
            btnSuaLop.Enabled = logged;
            btnXoaLop.Enabled = logged;
            btnXemDiem.Enabled = logged;
            btnXemDiemLop.Enabled = logged;
            btnCapNhat.Enabled = logged;
            //  btnThoat.Enabled = logged;
            btnLuu.Enabled = logged;
            btnHuy.Enabled = logged;
            // btnPrevious.Enabled = logged;
            // btnFirst.Enabled = logged;
        }

        private void gvDSLop_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if (gvDSLop.FocusedRowHandle >= 0)
            {
                tbMaLop.Text = gvDSLop.GetFocusedRowCellValue(colMaLop).ToString();
                tbTenLop.Text = ChuanHoa(gvDSLop.GetFocusedRowCellValue(colTenLop).ToString().ToLower());
                cboTenKhoa.Text = ChuanHoa(gvDSLop.GetFocusedRowCellValue(colTenKhoa).ToString().ToLower());
                tbSiSo.Text = gvDSLop.GetFocusedRowCellValue(colSiSo).ToString();
                LopbindingSource.DataSource = Lop_BUS.DSSV_Lop(tbTenLop.Text);
                gcLop.DataSource = LopbindingSource;
            }
        }

        private void btnSuaLop_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            nbcLop.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            nbcDSLop.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            tbMaLop.Focus();
        }
        //thêm lớp
        private void btnThemLop_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            nbcDSLop.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            nbcLop.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            if (them)
            {
                cboTenKhoa.Refresh();
                tbTenLop.ResetText();
                tbSiSo.ResetText();
                tbSiSo.Text = "0";
                string maLop = nextMa(Lop_BUS.lastMaLop());
                //
                them = false;
                DSLopbindingSource.AddNew();
                //mã sinh viên tự tăng
                gvDSLop.SetFocusedRowCellValue(colMaLop, maLop);
                gvDSLop.SetFocusedRowCellValue(colSiSo, "0");
                tbMaLop.Text = maLop;
                //trỏ tới dòng cuối cùng trong gridview
                gvDSLop.FocusedRowHandle = gvDSLop.RowCount - 1;
                tbTenLop.Focus();
            }
            else
            {
                tbTenLop.Focus();
                gvDSLop.FocusedRowHandle = gvDSLop.RowCount - 1;
            }
        }

        private void btnLuu_Click(object sender, EventArgs e)
        {
            try
            {
                if (!them && gvDSLop.FocusedRowHandle == gvDSLop.RowCount - 1)
                {
                    if (cboTenKhoa.Text != "" && tbTenLop.Text != "")
                    {
                        string tenLop = ChuanHoa(tbTenLop.Text.ToLower());
                        Lop_BUS.themLop(tbMaLop.Text, tenLop, cboTenKhoa.Text);
                        //thêm trực tiếp lớp vào gridview mà không load lại danh sách
                        gvDSLop.SetFocusedRowCellValue(colMaLop, tbMaLop.Text);
                        gvDSLop.SetFocusedRowCellValue(colTenLop, tenLop);
                        gvDSLop.SetFocusedRowCellValue(colTenKhoa, cboTenKhoa.Text);
                        MessageBox.Show("Thêm thành công");
                        them = true;
                    }
                    else
                        MessageBox.Show("Nhập đầy đủ thông tin cho Lớp");
                }
                else
                {
                    if (MessageBox.Show("Bạn có chắc muốn sửa không?", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        try
                        {
                            string tenLop=ChuanHoa(tbTenLop.Text.Trim().ToLower());
                            if (tenLop != gvDSLop.GetFocusedRowCellValue(colTenLop).ToString() ||
                                cboTenKhoa.Text != gvDSLop.GetFocusedRowCellValue(colTenKhoa).ToString())
                            {
                                Lop_BUS.suaLop(tbMaLop.Text, tenLop, cboTenKhoa.Text);
                                gvDSLop.SetFocusedRowCellValue(colTenLop, tenLop);
                                gvDSLop.SetFocusedRowCellValue(colTenKhoa, cboTenKhoa.Text);
                                tbTenLop.Text = tenLop;
                                MessageBox.Show("Sửa thành công!");
                            }
                            else
                            {
                                tbTenLop.Text = gvDSLop.GetFocusedRowCellValue(colTenLop).ToString();
                                cboTenKhoa.Text = gvDSLop.GetFocusedRowCellValue(colTenKhoa).ToString();
                            }
                            sua = true;
                        }
                        catch
                        {
                            MessageBox.Show("Sửa không thành công!");
                        }
                    }
                    else
                    {
                        tbTenLop.Text = gvDSLop.GetFocusedRowCellValue(colTenLop).ToString();
                        cboTenKhoa.Text = gvDSLop.GetFocusedRowCellValue(colTenKhoa).ToString();                      
                    }
                }
            }
            catch
            {
                MessageBox.Show("Lưu thất bại");
            }
        }

        private void btnHuy_Click(object sender, EventArgs e)
        {
            //hủy khi không muốn thêm Lop
            // MessageBox.Show(gvDSLop.FocusedRowHandle+" "+gvDSLop.RowCount);
            if (!them && gvDSLop.FocusedRowHandle == gvDSLop.RowCount - 1)
            {
                them = true;
                DSLopbindingSource.RemoveAt(gvDSLop.RowCount - 1);
            }
            //hủy khi sửa
            else
            {
                tbTenLop.Text = gvDSLop.GetFocusedRowCellValue(colTenLop).ToString();
                cboTenKhoa.Text = gvDSLop.GetFocusedRowCellValue(colTenKhoa).ToString();  
            }
        }

        private void gvDSLop_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            if (!them)
            {
                if (gvDSLop.FocusedRowHandle != gvDSLop.RowCount - 1)
                {

                }
                else
                {
                    if (MessageBox.Show("Bạn có chắc muốn lưu không?", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        try
                        {
                            if (gvDSLop.GetFocusedRowCellValue(colTenLop).ToString() != "" &&
                            gvDSLop.GetFocusedRowCellValue(colTenKhoa).ToString() != "")
                            {
                                //chuẩn hóa tên
                                string maLop = gvDSLop.GetFocusedRowCellValue(colMaLop).ToString();
                                string tenLop = ChuanHoa(gvDSLop.GetFocusedRowCellValue(colTenLop).ToString().ToLower());
                                string tenKhoa = gvDSLop.GetFocusedRowCellValue(colTenKhoa).ToString();
                                Lop_BUS.themLop(maLop, tenLop,tenKhoa);
                                MessageBox.Show("Thêm thành công");
                                // this.SinhVienbindingSource.EndEdit();
                                //chuẩn hóa trực tiếp sinh viên vào gridview mà không load lại danh sách
                                //  gvDSLop.SetFocusedRowCellValue(colHoSV, hoSV);
                                // gvDSLop.SetFocusedRowCellValue(colTenSV, tenSV);
                                ///  gvDSLop.SetFocusedRowCellValue(colDiaChi, diaChi);
                                //  gvDSLop.SetFocusedRowCellValue(colNoiSinh, noiSinh);
                                //load_DS();
                                //chuẩn hóa ở textbox
                                tbTenLop.Text = tenLop;
                                cboTenKhoa.Text = tenKhoa;
                                //
                                them = true;
                            }
                            else
                                MessageBox.Show("Nhập đầy đủ thông tin cho Lớp");
                        }
                        catch
                        {
                            MessageBox.Show("Thêm không thành công!");
                        }
                    }
                    else
                    {
                        them = true;
                        DSLopbindingSource.RemoveAt(gvDSLop.RowCount - 1);
                    }
                }
            }
            else if (sua)
            {
                sua = false;
            }
            else
            {
                if (tbTenLop.Text.Trim() == gvDSLop.GetFocusedRowCellValue(colTenLop).ToString().Trim() &&
                    cboTenKhoa.Text.Trim() == gvDSLop.GetFocusedRowCellValue(colTenKhoa).ToString().Trim())
                {

                }
                else
                {
                    if (MessageBox.Show("Bạn có chắc muốn sửa không?", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        try
                        {
                            string tenLop = ChuanHoa(gvDSLop.GetFocusedRowCellValue(colTenLop).ToString().ToLower());
                            string tenKhoa = gvDSLop.GetFocusedRowCellValue(colTenKhoa).ToString();
                            if (tbTenLop.Text.Trim() != tenLop||cboTenKhoa.Text!=tenKhoa)
                            {
                                Lop_BUS.suaLop(tbMaLop.Text, tenLop, cboTenKhoa.Text);
                                gvDSLop.SetFocusedRowCellValue(colTenLop, tenLop);
                                tbTenLop.Text = tenLop;
                                cboTenKhoa.Text=tenKhoa;
                                MessageBox.Show("Sửa thành công!");
                            }
                            else
                            {
                                gvDSLop.SetFocusedRowCellValue(colTenLop, tenLop);
                            }
                         }
                        catch
                        {
                            MessageBox.Show("Sửa không thành công!");
                        }
                    }
                    else
                    {
                        gvDSLop.SetFocusedRowCellValue(colTenLop, tbTenLop.Text);
                        gvDSLop.SetFocusedRowCellValue(colTenKhoa, cboTenKhoa.Text);
                    }
                }
            }
        }

        private void btnXoaLop_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (MessageBox.Show("Bạn có chắc muốn xóa không?", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                Lop_BUS.xoaLop(gvDSLop.GetFocusedRowCellValue(colMaLop).ToString());
                DSLopbindingSource.RemoveAt(gvDSLop.FocusedRowHandle);
                MessageBox.Show("Xóa thành công!");
            }
        }


        private void btnXemDiem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            nbcDSLop.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Collapsed;
            nbcLop.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            frmDiemSinhVien f = new frmDiemSinhVien();
            f.MaSV = gvLop.GetFocusedRowCellValue(colMaSV).ToString();
            f.TenSV = gvLop.GetFocusedRowCellValue(colTenSV).ToString();
            f.loadInfo();
            f.Show();
        }

        private void btnCapNhat_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            nbcDSLop.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Expanded;
            nbcLop.OptionsNavPane.NavPaneState = DevExpress.XtraNavBar.NavPaneState.Collapsed;
            LoadDSLop();
            DataTable dtb = Khoa_BUS.LoadtenKhoa();
            for (int i = 0; i < dtb.Rows.Count; i++)
            {
                string name = ChuanHoa(dtb.Rows[i][0].ToString().ToLower());
                repositoryItemComboBox1.Items.Add(name);
                cboTenKhoa.Items.Add(name);
            }
        }

        private void btnXemDiemLop_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            frmPhieuDiemLop f = new frmPhieuDiemLop();
            f.maLop = tbMaLop.Text;
            f.tenLop = tbTenLop.Text;
            f.namNhapHoc = DateTime.Parse(gvLop.GetFocusedRowCellValue(colNgayNhapHoc).ToString()).Year;
            f.loadInfo();
            f.Show();
        }



      

    }
}